{"version":3,"sources":["webpack://aurora-launcher/webpack/bootstrap","webpack://aurora-launcher/external \"electron\"","webpack://aurora-launcher/external \"path\"","webpack://aurora-launcher/external \"url\"","webpack://aurora-launcher/./src/main/index.ts"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","require","title","mainWindow","createMainWindow","window","BrowserWindow","width","height","frame","resizable","maximizable","webPreferences","nodeIntegration","webContents","on","openDevTools","loadURL","format","pathname","__dirname","protocol","slashes","focus","setImmediate","app","process","platform","ipcMain","minimize","close"],"mappings":"wFACIA,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUC,QAG3C,IAAIC,EAASJ,EAAyBE,GAAY,CAGjDC,QAAS,IAOV,OAHAE,EAAoBH,GAAUE,EAAQA,EAAOD,QAASF,GAG/CG,EAAOD,Q,MCpBf,MAAM,EAA+BG,QAAQ,YCAvC,EAA+BA,QAAQ,QCAvC,EAA+BA,QAAQ,QCGvC,MAAEC,GAAU,EAAQ,KAK1B,IAAIC,EAEJ,SAASC,IACP,MAAMC,EAAS,IAAI,EAAAC,cAAc,CAC/BC,MAAO,IACPC,OAAQ,IACRC,OAAO,EACPC,WAAW,EACXC,aAAa,EACbT,MAAOA,EACPU,eAAgB,CACdC,iBAAiB,KA2BrB,OAvBAR,EAAOS,YAAYC,GAAG,yBAAyB,KAE3CV,EAAOS,YAAYE,kBAIvBX,EAAOY,SAAQ,IAAAC,QAAU,CACvBC,SAAU,OAAUC,UAAW,cAC/BC,SAAU,OACVC,SAAS,KAGXjB,EAAOU,GAAG,UAAU,KAClBZ,EAAa,QAGfE,EAAOS,YAAYC,GAAG,mBAAmB,KACvCV,EAAOkB,QACPC,cAAa,KACXnB,EAAOkB,cAIJlB,EAIT,EAAAoB,IAAA,GAAO,qBAAqB,KAED,WAArBC,QAAQC,UACV,EAAAF,IAAA,UAIJ,EAAAA,IAAA,GAAO,YAAY,KAEE,OAAftB,IACFA,EAAaC,QAKjB,EAAAqB,IAAA,GAAO,SAAS,KACdtB,EAAaC,OAGf,EAAAwB,QAAA,GAAW,eAAe,KACxBzB,WAAY0B,cAGd,EAAAD,QAAA,GAAW,gBAAgB,KACzBzB,WAAY2B,Y","file":"main.js","sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"path\");;","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"url\");;","import { app, BrowserWindow, ipcMain } from 'electron'\r\nimport * as path from 'path'\r\nimport { format as formatUrl } from 'url'\r\nconst { title } = require('../../config.json')\r\n\r\n// const isDevelopment = process.env.NODE_ENV !== 'production'\r\n\r\n// global reference to mainWindow (necessary to prevent window from being garbage collected)\r\nlet mainWindow : BrowserWindow | null\r\n\r\nfunction createMainWindow() {\r\n  const window = new BrowserWindow({\r\n    width: 900,\r\n    height: 550,\r\n    frame: false,\r\n    resizable: false,\r\n    maximizable: false,\r\n    title: title,\r\n    webPreferences: {\r\n      nodeIntegration: true\r\n    }\r\n  })\r\n\r\n  window.webContents.on('did-frame-finish-load', () => {\r\n    // if (isDevelopment) {\r\n      window.webContents.openDevTools()\r\n    // }\r\n  })\r\n\r\n  window.loadURL(formatUrl({\r\n    pathname: path.join(__dirname, 'index.html'),\r\n    protocol: 'file',\r\n    slashes: true\r\n  }))\r\n\r\n  window.on('closed', () => {\r\n    mainWindow = null\r\n  })\r\n\r\n  window.webContents.on('devtools-opened', () => {\r\n    window.focus()\r\n    setImmediate(() => {\r\n      window.focus()\r\n    })\r\n  })\r\n\r\n  return window\r\n}\r\n\r\n// quit application when all windows are closed\r\napp.on('window-all-closed', () => {\r\n  // on macOS it is common for applications to stay open until the user explicitly quits\r\n  if (process.platform !== 'darwin') {\r\n    app.quit()\r\n  }\r\n})\r\n\r\napp.on('activate', () => {\r\n  // on macOS it is common to re-create a window even after all windows have been closed\r\n  if (mainWindow === null) {\r\n    mainWindow = createMainWindow()\r\n  }\r\n})\r\n\r\n// create main BrowserWindow when electron is ready\r\napp.on('ready', () => {\r\n  mainWindow = createMainWindow()\r\n})\r\n\r\nipcMain.on('window-hide', () => {\r\n  mainWindow?.minimize()\r\n})\r\n\r\nipcMain.on('window-close', () => {\r\n  mainWindow?.close()\r\n})"],"sourceRoot":""}